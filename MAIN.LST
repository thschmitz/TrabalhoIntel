Microsoft (R) Macro Assembler Version 6.11		    12/23/24 22:19:51
main.asm						     Page 1 - 1


				
				;
				;====================================================================
				;	- Escrever um programa para ler um arquivo texto e 
				;		apresentá-lo na tela
				;	- O usuário devem informar o nome do arquivo, 
				;		assim que for apresentada a mensagem: Nome do arquivo: 
				;====================================================================
				;
					.model		small
					.stack
						
 = 000D				CR		equ		0dh
 = 000A				LF		equ		0ah
				
 0000					.data
				
 0000 0000			ContadorBuffer  dw 	0
 0002 54 65 73 74 65 00		NomeTesteAleatorio db 	"Teste", 0
 0008 49 4E 2E 74 78 74		FileNameSrc		db		"IN.txt", 0		; Nome do arquivo a ser lido
       00
 000F 4F 55 54 2E 74 78		FileNameDst		db		"OUT.txt", 0	; Nome do arquivo a ser escrito
       74 00
 0017 0000			FileHandleSrc	dw		0				; Handler do arquivo origem
 0019 0000			FileHandleDst	dw		0				; Handler do arquivo destino
 001B  07D0 [			FileBuffer		db		2000 dup (?)	; Buffer de leitura/escrita do arquivo
        00
       ]
 07EB  07D0 [			NewBuffer		db		2000 dup (?)	; Buffer de leitura/escrita do arquivo
        00
       ]
 0FBB  07D0 [			OutputBuffer    db 		2000 dup(?) 	; Espaço para os BarCodes (64 bytes)
        00
       ]
				
				
 178B 2B			BarCodeTable DB 101011b     ; 0
 178C  6B				DB 1101011b    ; 1
 178D  4B				DB 1001011b    ; 2
 178E  65				DB 1100101b    ; 3
 178F  5B				DB 1011011b    ; 4
 1790  6D				DB 1101101b    ; 5
 1791  4D				DB 1001101b    ; 6
 1792  53				DB 1010011b    ; 7
 1793  69				DB 1101001b    ; 8
 1794  6D				DB 1101101b    ; 9
 1795  2D				DB 101101b     ; -
 1796  59				DB 1011001b    ; SS
				
				
				
 1797 45 72 72 6F 3A 20		MsgErroOpenFile		db	"Erro: Nao foi possivel fazer a abertura do arquivo.", CR, LF, 0
       4E 61 6F 20 66 6F
       69 20 70 6F 73 73
       69 76 65 6C 20 66
       61 7A 65 72 20 61
       20 61 62 65 72 74
       75 72 61 20 64 6F
       20 61 72 71 75 69
       76 6F 2E 0D 0A 00
 17CD 45 72 72 6F 3A 20		MsgErroCreateFile	db	"Erro: Nao foi possivel fazer a criacao do arquivo.", CR, LF, 0
       4E 61 6F 20 66 6F
       69 20 70 6F 73 73
       69 76 65 6C 20 66
       61 7A 65 72 20 61
       20 63 72 69 61 63
       61 6F 20 64 6F 20
       61 72 71 75 69 76
       6F 2E 0D 0A 00
 1802 45 72 72 6F 3A 20		MsgErroReadFile		db	"Erro: Nao foi possível fazer a leitura do arquivo.", CR, LF, 0
       4E 61 6F 20 66 6F
       69 20 70 6F 73 73
       C3 AD 76 65 6C 20
       66 61 7A 65 72 20
       61 20 6C 65 69 74
       75 72 61 20 64 6F
       20 61 72 71 75 69
       76 6F 2E 0D 0A 00
 1838 45 72 72 6F 3A 20		MsgErroSemStart		db	"Erro: Nao foi encontrado a palavra 'START' no arquivo.", CR, LF, 0
       4E 61 6F 20 66 6F
       69 20 65 6E 63 6F
       6E 74 72 61 64 6F
       20 61 20 70 61 6C
       61 76 72 61 20 27
       53 54 41 52 54 27
       20 6E 6F 20 61 72
       71 75 69 76 6F 2E
       0D 0A 00
 1871 45 72 72 6F 3A 20		MsgErroSemStop		db	"Erro: Nao foi encontrado a palavra 'STOP' no arquivo.", CR, LF, 0
       4E 61 6F 20 66 6F
       69 20 65 6E 63 6F
       6E 74 72 61 64 6F
       20 61 20 70 61 6C
       61 76 72 61 20 27
       53 54 4F 50 27 20
       6E 6F 20 61 72 71
       75 69 76 6F 2E 0D
       0A 00
 18A9 45 72 72 6F 3A 20		MsgErroWriteFile	db	"Erro: Nao foi possivel fazer a escrita do arquivo.", CR, LF, 0
       4E 61 6F 20 66 6F
       69 20 70 6F 73 73
       69 76 65 6C 20 66
       61 7A 65 72 20 61
       20 65 73 63 72 69
       74 61 20 64 6F 20
       61 72 71 75 69 76
       6F 2E 0D 0A 00
 18DE 45 72 72 6F 3A 20		MsgErrorCaracterInvalido db "Erro: Nao foi possivel fazer a traducao de um caracter que eh invalido.", CR, LF, 0
       4E 61 6F 20 66 6F
       69 20 70 6F 73 73
       69 76 65 6C 20 66
       61 7A 65 72 20 61
       20 74 72 61 64 75
       63 61 6F 20 64 65
       20 75 6D 20 63 61
       72 61 63 74 65 72
       20 71 75 65 20 65
       68 20 69 6E 76 61
       6C 69 64 6F 2E 0D
       0A 00
				
 0000					.code
					.startup
				
 0017  8D 16 0008 R			lea		dx,FileNameSrc
 001B  E8 0085				call	fopen
 001E  89 1E 0017 R			mov		FileHandleSrc,bx
 0022  73 2C				jnc		Continua2
 0024  8D 1E 1797 R			lea		bx, MsgErroOpenFile
 0028  E8 024A				call	printf_s
					.exit	1
 0030				Continua1:
				
 0030  8D 16 000F R			lea		dx,FileNameDst
 0034  E8 0075				call	fcreate
 0037  89 1E 0019 R			mov		FileHandleDst,bx
 003B  73 13				jnc		Continua2
 003D  8B 1E 0017 R			mov		bx,FileHandleSrc
 0041  E8 0072				call	fclose
 0044  8D 1E 17CD R			lea		bx, MsgErroCreateFile
 0048  E8 022A				call	printf_s
					.exit	1
 0050				Continua2:
				
 0050  8B 1E 0017 R			mov		bx,FileHandleSrc    
 0054  E8 0064				call	getChar
 0057  73 1A				jnc		Continua3
 0059  8D 1E 1802 R			lea		bx, MsgErroReadFile
 005D  E8 0215				call	printf_s
 0060  8B 1E 0017 R			mov		bx,FileHandleSrc
 0064  E8 004F				call	fclose
 0067  8B 1E 0019 R			mov		bx,FileHandleDst
 006B  E8 0048				call	fclose
					.exit	1
 0073				Continua3:
				
 0073  83 F8 00				cmp		ax,0
 0076  74 0B				jz		TerminouArquivo
 0078  EB D6				jmp 	Continua2
 007A				Continua4:
				
 007A  8B 1E 0019 R			mov		bx,FileHandleDst
 007E  E8 01E4				call	setChar
 0081  73 CD				jnc		Continua2
					
 0083				TerminouArquivo:
				
 0083  E8 004C				call    criaNovoBuffer
				
 0086  E8 00E6				call    transformaEmBarcode
				
				
 0089  8D 1E 0FBB R			lea 	bx, OutputBuffer
 008D  E8 01E5				call 	printf_s
				
				
				
 0090  8B 1E 0017 R			mov		bx,FileHandleSrc	; Fecha arquivo origem
 0094  E8 001F				call	fclose
 0097  8B 1E 0019 R			mov		bx,FileHandleDst	; Fecha arquivo destino
 009B  E8 0018				call	fclose
					.exit	0
				
				
				;--------------------------------------------------------------------
				;Função	Abre o arquivo cujo nome está no string apontado por DX
				;		boolean fopen(char *FileName -> DX)
				;Entra: DX -> ponteiro para o string com o nome do arquivo
				;Sai:   BX -> handle do arquivo
				;       CF -> 0, se OK
				;--------------------------------------------------------------------
 00A3				fopen	proc	near
 00A3  B0 00				mov		al,0
 00A5  B4 3D				mov		ah,3dh
 00A7  CD 21				int		21h
 00A9  8B D8				mov		bx,ax
 00AB  C3				ret
 00AC				fopen	endp
				
				;--------------------------------------------------------------------
				;Função Cria o arquivo cujo nome está no string apontado por DX
				;		boolean fcreate(char *FileName -> DX)
				;Sai:   BX -> handle do arquivo
				;       CF -> 0, se OK
				;--------------------------------------------------------------------
 00AC				fcreate	proc	near
 00AC  B9 0000				mov		cx,0
 00AF  B4 3C				mov		ah,3ch
 00B1  CD 21				int		21h
 00B3  8B D8				mov		bx,ax
 00B5  C3				ret
 00B6				fcreate	endp
				
				;--------------------------------------------------------------------
				;Entra:	BX -> file handle
				;Sai:	CF -> "0" se OK
				;--------------------------------------------------------------------
 00B6				fclose	proc	near
 00B6  B4 3E				mov		ah,3eh
 00B8  CD 21				int		21h
 00BA  C3				ret
 00BB				fclose	endp
				
				;--------------------------------------------------------------------
				;Função	Le um caractere do arquivo identificado pelo HANLDE BX
				;		getChar(handle->BX)
				;Entra: BX -> file handle
				;Sai:   
				;		AX -> numero de caracteres lidos
				;		CF -> "0" se leitura ok
				;--------------------------------------------------------------------
 00BB				getChar proc near
 00BB  B9 0001			    mov     cx, 1                  ; Number of bytes to read
 00BE  8D 36 001B R		    lea     si, FileBuffer         ; Load the base address of FileBuffer into SI
 00C2  8B D6			    mov     dx, si                 ; Copy base address to DX (used by DOS)
 00C4  A1 0000 R		    mov     ax, ContadorBuffer     ; Load FileCounter into AX
 00C7  03 D0			    add     dx, ax                 ; Adjust DX to point to the current position
 00C9  B4 3F			    mov     ah, 3Fh                ; DOS function: Read from file
 00CB  CD 21			    int     21h                    ; Call DOS interrupt
 00CD  FF 06 0000 R		    inc     ContadorBuffer         ; Increment the counter for the next read
 00D1  C3			    ret                            ; Return to the caller
 00D2				getChar endp
				
				;--------------------------------------------------------------------
				;Função que cria um novo buffer com o conteudo do arquivo que interessa
				;		
				;Sai:   
				;		NovoBuffer -> buffer com o conteudo do arquivo
				;--------------------------------------------------------------------
 00D2				criaNovoBuffer    proc near
 00D2  8D 1E 001B R			lea bx, FileBuffer
				
 00D6				criaNovoBuffer_loop:
 00D6  8A 17				mov 	dl, [bx]	; Carrega o primeiro caractere do buffer
					
 00D8  80 FA 00				cmp 	dl, 0		; Verifica se o buffer está vazio
 00DB  74 71				je 		criaNovoBuffer_sem_start	; Se estiver, retorna
				
 00DD  80 FA 53				cmp     byte ptr dl, 'S'             ; Verifica se o caractere é 'S'
 00E0  75 69				jne     criaNovoBuffer_end    ; Se não for, sai do loop
				
 00E2  8A 57 01				mov dl, [bx + 1]
				
 00E5  80 FA 54				cmp     byte ptr dl, 'T'  ; Verifica se o próximo caractere é 'T'
 00E8  75 61				jne     criaNovoBuffer_end    ; Se não for, sai do loop
				
 00EA  8A 57 02				mov dl, [bx + 2]
				
 00ED  80 FA 41				cmp     byte ptr dl, 'A'; Verifica se o próximo caractere é 'A'
 00F0  75 59				jne     criaNovoBuffer_end    ; Se não for, sai do loop
				
 00F2  8A 57 03				mov dl, [bx + 3]
				
 00F5  80 FA 52				cmp     byte ptr dl, 'R'; Verifica se o próximo caractere é 'R'
 00F8  75 51				jne     criaNovoBuffer_end    ; Se não for, sai do loop
				
 00FA  8A 57 04				mov dl, [bx + 4]
				
 00FD  80 FA 54				cmp     byte ptr dl, 'T'; Verifica se o próximo caractere é 'T'
 0100  75 49				jne     criaNovoBuffer_end    ; Se não for, sai do loop
 0102  83 C3 04				add     bx, 4
 0105  8D 36 07EB R			lea 	si, NewBuffer
				
 0109				criaNovoBuffer_loop2:
 0109  43				inc bx
 010A  8A 17				mov 	dl, [bx]
 010C  80 FA 0A				cmp     byte ptr dl, 0Ah ; CR (Carriage Return)
 010F  74 F8				je criaNovoBuffer_loop2
 0111  80 FA 0D				cmp     byte ptr dl, 0Dh ; LF (Line Feed)
 0114  74 F3				je criaNovoBuffer_loop2
				
 0116  4B				dec bx
 0117				criaNovoBuffer_insere:
 0117  03 C6				add     ax, si
 0119  43				inc 	bx
 011A  8A 17				mov 	dl, [bx]
 011C  80 FA 00				cmp     byte ptr dl, 0 
 011F  74 43				je		criaNovoBuffer_sem_stop
				
 0121  88 14				mov 	byte ptr [si], dl
 0123  46				inc 	si
				
 0124  80 FA 53				cmp 	byte ptr dl, 'S' ; Verifica se o próximo caractere é 'S' de 'STOP'
 0127  75 EE				jne		criaNovoBuffer_insere
 0129  4E				dec si 
				
 012A  8A 57 01				mov 	dl, [bx + 1]
 012D  80 FA 54				cmp 	byte ptr dl, 'T' ; Verifica se o próximo caractere é 'T' de 'STOP'
 0130  75 E5				jne		criaNovoBuffer_insere
 0132  8A 57 02				mov 	dl, [bx + 2]
 0135  80 FA 4F				cmp 	byte ptr dl, 'O' ; Verifica se o próximo caractere é 'O' de 'STOP'
 0138  75 DD				jne		criaNovoBuffer_insere
 013A  8A 57 03				mov 	dl, [bx + 3]
 013D  80 FA 50				cmp 	byte ptr dl, 'P' ; Verifica se o próximo caractere é 'P' de 'STOP'
 0140  75 D5				jne		criaNovoBuffer_insere
 0142  83 C3 04				add 	bx, 4
				
 0145  C7 04 0000			mov     [si], 0
					
 0149  EB 11				jmp     criaNovoBuffer_print
					
 014B				criaNovoBuffer_end:
 014B  43				inc bx
 014C  EB 88				jmp criaNovoBuffer_loop
				
 014E				criaNovoBuffer_sem_start:
 014E  83 F9 00				cmp cx, 0
 0151  8D 1E 1838 R			lea bx, MsgErroSemStart
 0155  E8 011D				call printf_s
					.exit
				
 015C				criaNovoBuffer_print:
 015C  8D 1E 07EB R			lea bx, NewBuffer
				
 0160  E8 0112				call printf_s
 0163  C3				ret
				
 0164				criaNovoBuffer_sem_stop:
 0164  8D 1E 1871 R			lea bx, MsgErroSemStop
 0168  E8 010A				call printf_s
					.exit
				
 016F				criaNovoBuffer    endp
				
				;--------------------------------------------------------------------
				;Função que traduz cada caracter do novo buffer em um barcode 
				;		
				;Sai:   
				;		Buffer com dados em barcode
				;--------------------------------------------------------------------
 016F				transformaEmBarcode proc near
 016F  B9 0000				mov     cx, 0
 0172  8D 36 0FBB R			lea 	si, OutputBuffer
 0176  8D 1E 07EB R			lea 	bx, NewBuffer
					
					;mov     dl, 1011001b
					;mov     [si + cx], dl
					;inc     cx
				
 017A				transformaEmBarcode_loop:
 017A  8A 17				mov     dl, [bx]
				
 017C  43				inc bx
				
 017D  80 FA 00				cmp     byte ptr dl, 0    ; Verifica se o buffer está vazio
 0180  75 03 E9 00D8			je      transformaEmBarcode_fim_traducao    ; Se estiver, retorna
				
 0185  80 FA 0D				cmp 	byte ptr dl, 13
 0188  74 F0				je 		transformaEmBarcode_loop
				
 018A  80 FA 0A				cmp 	byte ptr dl, 10
 018D  74 EB				je 		transformaEmBarcode_loop
				
 018F  80 FA 30				cmp     byte ptr dl, '0'    ; Verifica se o caractere é '0'
 0192  74 48				je      transformaEmBarcode_0    ; Se for, pula para a função que transforma em barcode
				
 0194  80 FA 31				cmp     byte ptr dl, '1'    ; Verifica se o caractere é '1'
 0197  74 60				je      transformaEmBarcode_1    ; Se for, pula para a função que transforma em barcode
				
 0199  80 FA 32				cmp     byte ptr dl, '2'    ; Verifica se o caractere é '2'
 019C  74 65				je      transformaEmBarcode_2    ; Se for, pula para a função que transforma em barcode
				
 019E  80 FA 33				cmp     byte ptr dl, '3'    ; Verifica se o caractere é '3'
 01A1  74 6A				je      transformaEmBarcode_3    ; Se for, pula para a função que transforma em barcode
				
 01A3  80 FA 34				cmp     byte ptr dl, '4'    ; Verifica se o caractere é '4'
 01A6  74 6F				je      transformaEmBarcode_4    ; Se for, pula para a função que transforma em barcode
				
 01A8  80 FA 35				cmp     byte ptr dl, '5'    ; Verifica se o caractere é '5'
 01AB  74 74				je      transformaEmBarcode_5    ; Se for, pula para a função que transforma em barcode
				
 01AD  80 FA 36				cmp     byte ptr dl, '6'    ; Verifica se o caractere é '6'
 01B0  74 79				je      transformaEmBarcode_6    ; Se for, pula para a função que transforma em barcode
				
 01B2  80 FA 37				cmp     byte ptr dl, '7'    ; Verifica se o caractere é '7'
 01B5  74 7E				je      transformaEmBarcode_7    ; Se for, pula para a função que transforma em barcode
				
 01B7  80 FA 38				cmp     byte ptr dl, '8'    ; Verifica se o caractere é '8'
 01BA  75 03 E9 0080			je      transformaEmBarcode_8    ; Se for, pula para a função que transforma em barcode
				
 01BF  80 FA 39				cmp     byte ptr dl, '9'    ; Verifica se o caractere é '9'
 01C2  75 03 E9 0082			je      transformaEmBarcode_9    ; Se for, pula para a função que transforma em barcode
				
 01C7  80 FA 2D				cmp     byte ptr dl, '-'    ; Verifica se o caractere é '-'
 01CA  75 03 E9 0084			je      transformaEmBarcode_menos    ; Se for, pula para a função que transforma em barcode
				
 01CF  EB 00				jmp     transformaEmBarcode_erro_caractere_invalido
				
 01D1				transformaEmBarcode_erro_caractere_invalido:
 01D1  8D 1E 18DE R			lea     bx, MsgErrorCaracterInvalido
 01D5  E8 009D				call    printf_s
					.exit
				
 01DC				transformaEmBarcode_0:
 01DC  B2 2B			    mov     dl, 101011b           ; Caractere '0' -> Código binário
					
 01DE				loop_acha_primeiro_0:
 01DE  D0 E2				shl	 dl, 1
 01E0  72 02				jc loop_coloca_valores_0
 01E2  EB FA				jmp loop_acha_primeiro_0
				
 01E4				loop_coloca_valores_0:
 01E4  B8 0030				mov  ax, 30h
 01E7  83 D0 00				adc  ax, 0
				
 01EA  89 04				mov	 [si], ax
 01EC  41				inc cx
 01ED  46				inc si
				
 01EE  80 FA 00				cmp 	dl, 0
 01F1  74 04				je  	loop_coloca_valores_0_acaba
				
 01F3  D0 E2				shl 	dl, 1
 01F5  EB ED				jmp 	loop_coloca_valores_0
				
 01F7				loop_coloca_valores_0_acaba:
					
 01F7  EB 81			    jmp     transformaEmBarcode_loop
				
 01F9				transformaEmBarcode_1:
 01F9  B2 6B			    mov     dl, 1101011b           ; Caractere '1' -> Código binário
 01FB  88 B8 0FBB R		    mov     [OutputBuffer + cx], dl
 01FF  41			    inc     cx
 0200  E9 FF77			    jmp     transformaEmBarcode_loop
				
 0203				transformaEmBarcode_2:
 0203  B2 4B			    mov     dl, 1001011b           ; Caractere '2' -> Código binário
 0205  88 B8 0FBB R		    mov     [OutputBuffer + cx], dl
 0209  41			    inc     cx
 020A  E9 FF6D			    jmp     transformaEmBarcode_loop
				
 020D				transformaEmBarcode_3:
 020D  B2 65			    mov     dl, 1100101b           ; Caractere '3' -> Código binário
 020F  88 B8 0FBB R		    mov     [OutputBuffer + cx], dl
 0213  41			    inc     cx
 0214  E9 FF63			    jmp     transformaEmBarcode_loop
				
 0217				transformaEmBarcode_4:
 0217  B2 5B			    mov     dl, 1011011b           ; Caractere '4' -> Código binário
 0219  88 B8 0FBB R		    mov     [OutputBuffer + cx], dl
 021D  41			    inc     cx
 021E  E9 FF59			    jmp     transformaEmBarcode_loop
				
 0221				transformaEmBarcode_5:
 0221  B2 6D			    mov     dl, 1101101b           ; Caractere '5' -> Código binário
 0223  88 B8 0FBB R		    mov     [OutputBuffer + cx], dl
 0227  41			    inc     cx
 0228  E9 FF4F			    jmp     transformaEmBarcode_loop
				
 022B				transformaEmBarcode_6:
 022B  B2 4D			    mov     dl, 1001101b           ; Caractere '6' -> Código binário
 022D  88 B8 0FBB R		    mov     [OutputBuffer + cx], dl
 0231  41			    inc     cx
 0232  E9 FF45			    jmp     transformaEmBarcode_loop
				
 0235				transformaEmBarcode_7:
 0235  B2 53			    mov     dl, 1010011b           ; Caractere '7' -> Código binário
 0237  88 B8 0FBB R		    mov     [OutputBuffer + cx], dl
 023B  41			    inc     cx
 023C  E9 FF3B			    jmp     transformaEmBarcode_loop
				
 023F				transformaEmBarcode_8:
 023F  B2 69			    mov     dl, 1101001b           ; Caractere '8' -> Código binário
 0241  88 B8 0FBB R		    mov     [OutputBuffer + cx], dl
 0245  41			    inc     cx
 0246  E9 FF31			    jmp     transformaEmBarcode_loop
				
 0249				transformaEmBarcode_9:
 0249  B2 6D			    mov     dl, 1101101b           ; Caractere '9' -> Código binário
 024B  88 B8 0FBB R		    mov     [OutputBuffer + cx], dl
 024F  41			    inc     cx
 0250  E9 FF27			    jmp     transformaEmBarcode_loop
				
 0253				transformaEmBarcode_menos:
 0253  B2 2D			    mov     dl, 101101b            ; Caractere '-' -> Código binário
 0255  88 B8 0FBB R		    mov     [OutputBuffer + cx], dl
 0259  41			    inc     cx
 025A  E9 FF1D			    jmp     transformaEmBarcode_loop
				
 025D				transformaEmBarcode_fim_traducao:
 025D  B2 59			    mov     dl, 1011001b           ; Código de finalização
 025F  88 B8 0FBB R		    mov     [OutputBuffer + cx], dl
 0263  41			    inc     cx
 0264  C3			    ret
				
				
 0265				transformaEmBarcode endp
				
				;--------------------------------------------------------------------
				;Entra: BX -> file handle
				;       dl -> caractere
				;Sai:   AX -> numero de caracteres escritos
				;		CF -> "0" se escrita ok
				;--------------------------------------------------------------------
 0265				setChar	proc	near
 0265  B4 40				mov		ah,40h
 0267  B9 0001				mov		cx,1
 026A  88 16 001B R			mov		FileBuffer,dl
 026E  8D 16 001B R			lea		dx,FileBuffer
 0272  CD 21				int		21h
 0274  C3				ret
 0275				setChar	endp	
				
				
				;--------------------------------------------------------------------
				;Função Escrever um string na tela
				;		printf_s(char *s -> BX)
				;--------------------------------------------------------------------
 0275				printf_s	proc	near
 0275  8A 17				mov		dl,[bx]
 0277  80 FA 00				cmp		dl,0
 027A  74 09				je		ps_1
				
 027C  53				push	bx
 027D  B4 02				mov		ah,2
 027F  CD 21				int		21H
 0281  5B				pop		bx
				
 0282  43				inc		bx		
 0283  EB F0				jmp		printf_s
				
 0285				ps_1:
 0285  C3				ret
 0286				printf_s	endp
				
				;--------------------------------------------------------------------
						end
				;--------------------------------------------------------------------
				
				
					
				
				

Microsoft (R) Macro Assembler Version 6.11		    12/23/24 22:19:51
main.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 1928	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0400	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 0286	  Word	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

criaNovoBuffer . . . . . . . . .	P Near	 00D2	  _TEXT	Length= 011E Private
fclose . . . . . . . . . . . . .	P Near	 00B6	  _TEXT	Length= 0005 Private
fcreate  . . . . . . . . . . . .	P Near	 00AC	  _TEXT	Length= 000A Private
fopen  . . . . . . . . . . . . .	P Near	 00A3	  _TEXT	Length= 0009 Private
getChar  . . . . . . . . . . . .	P Near	 00BB	  _TEXT	Length= 0017 Private
printf_s . . . . . . . . . . . .	P Near	 0275	  _TEXT	Length= 0011 Private
setChar  . . . . . . . . . . . .	P Near	 0265	  _TEXT	Length= 0010 Private
transformaEmBarcode  . . . . . .	P Near	 016F	  _TEXT	Length= 00F6 Private


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@Startup . . . . . . . . . . . .	L Near	 0000	  _TEXT	
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
BarCodeTable . . . . . . . . . .	Byte	 178B	  _DATA	
CR . . . . . . . . . . . . . . .	Number	 000Dh	 
ContadorBuffer . . . . . . . . .	Word	 0000	  _DATA	
Continua1  . . . . . . . . . . .	L Near	 0030	  _TEXT	
Continua2  . . . . . . . . . . .	L Near	 0050	  _TEXT	
Continua3  . . . . . . . . . . .	L Near	 0073	  _TEXT	
Continua4  . . . . . . . . . . .	L Near	 007A	  _TEXT	
FileBuffer . . . . . . . . . . .	Byte	 001B	  _DATA	
FileHandleDst  . . . . . . . . .	Word	 0019	  _DATA	
FileHandleSrc  . . . . . . . . .	Word	 0017	  _DATA	
FileNameDst  . . . . . . . . . .	Byte	 000F	  _DATA	
FileNameSrc  . . . . . . . . . .	Byte	 0008	  _DATA	
LF . . . . . . . . . . . . . . .	Number	 000Ah	 
MsgErroCreateFile  . . . . . . .	Byte	 17CD	  _DATA	
MsgErroOpenFile  . . . . . . . .	Byte	 1797	  _DATA	
MsgErroReadFile  . . . . . . . .	Byte	 1802	  _DATA	
MsgErroSemStart  . . . . . . . .	Byte	 1838	  _DATA	
MsgErroSemStop . . . . . . . . .	Byte	 1871	  _DATA	
MsgErroWriteFile . . . . . . . .	Byte	 18A9	  _DATA	
MsgErrorCaracterInvalido . . . .	Byte	 18DE	  _DATA	
NewBuffer  . . . . . . . . . . .	Byte	 07EB	  _DATA	
NomeTesteAleatorio . . . . . . .	Byte	 0002	  _DATA	
OutputBuffer . . . . . . . . . .	Byte	 0FBB	  _DATA	
TerminouArquivo  . . . . . . . .	L Near	 0083	  _TEXT	
criaNovoBuffer_end . . . . . . .	L Near	 014B	  _TEXT	
criaNovoBuffer_insere  . . . . .	L Near	 0117	  _TEXT	
criaNovoBuffer_loop2 . . . . . .	L Near	 0109	  _TEXT	
criaNovoBuffer_loop  . . . . . .	L Near	 00D6	  _TEXT	
criaNovoBuffer_print . . . . . .	L Near	 015C	  _TEXT	
criaNovoBuffer_sem_start . . . .	L Near	 014E	  _TEXT	
criaNovoBuffer_sem_stop  . . . .	L Near	 0164	  _TEXT	
loop_acha_primeiro_0 . . . . . .	L Near	 01DE	  _TEXT	
loop_coloca_valores_0_acaba  . .	L Near	 01F7	  _TEXT	
loop_coloca_valores_0  . . . . .	L Near	 01E4	  _TEXT	
ps_1 . . . . . . . . . . . . . .	L Near	 0285	  _TEXT	
transformaEmBarcode_0  . . . . .	L Near	 01DC	  _TEXT	
transformaEmBarcode_1  . . . . .	L Near	 01F9	  _TEXT	
transformaEmBarcode_2  . . . . .	L Near	 0203	  _TEXT	
transformaEmBarcode_3  . . . . .	L Near	 020D	  _TEXT	
transformaEmBarcode_4  . . . . .	L Near	 0217	  _TEXT	
transformaEmBarcode_5  . . . . .	L Near	 0221	  _TEXT	
transformaEmBarcode_6  . . . . .	L Near	 022B	  _TEXT	
transformaEmBarcode_7  . . . . .	L Near	 0235	  _TEXT	
transformaEmBarcode_8  . . . . .	L Near	 023F	  _TEXT	
transformaEmBarcode_9  . . . . .	L Near	 0249	  _TEXT	
transformaEmBarcode_erro_caractere_invalido  L Near   01D1     _TEXT	
transformaEmBarcode_fim_traducao .	L Near	 025D	  _TEXT	
transformaEmBarcode_loop . . . .	L Near	 017A	  _TEXT	
transformaEmBarcode_menos  . . .	L Near	 0253	  _TEXT	

	   0 Warnings
	   0 Errors
